<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Makito的笔记本</title>
  <subtitle>代码如诗、文章、艺术品、人生。——总之就是Abstract。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.keep.moe/"/>
  <updated>2016-03-10T05:07:09.428Z</updated>
  <id>http://blog.keep.moe/</id>
  
  <author>
    <name>Sumi Makito</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>防止Android应用内截图</title>
    <link href="http://blog.keep.moe/2015/11/23/avoid-screenshot-in-android-app/"/>
    <id>http://blog.keep.moe/2015/11/23/avoid-screenshot-in-android-app/</id>
    <published>2015-11-23T15:59:41.000Z</published>
    <updated>2016-03-10T05:07:09.428Z</updated>
    
    <content type="html">&lt;p&gt;很多时候，用户需要在我们的应用中输入类似于身份证号、密码、银行卡号等敏感信息，此时如果在后台不怀好意的应用程序对这些敏感页面进行截图，将导致用户的个人信息泄露。&lt;br&gt;Android为我们提供了一种可以防止Activity被截图的方案来保护用户的隐私。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在 &lt;code&gt;setContentView&lt;/code&gt; 前向窗口添加一个 &lt;code&gt;FLAG_SECURE&lt;/code&gt; 的 &lt;code&gt;FLAG&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;0x00-代码&quot;&gt;&lt;a href=&quot;#0x00-代码&quot; class=&quot;headerlink&quot; title=&quot;0x00 代码&quot;&gt;&lt;/a&gt;0x00 代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x01-实机测试&quot;&gt;&lt;a href=&quot;#0x01-实机测试&quot; class=&quot;headerlink&quot; title=&quot;0x01 实机测试&quot;&gt;&lt;/a&gt;0x01 实机测试&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151123_avoid-screenshot-in-android-app/00.00.png&quot; alt=&quot;直接截图&quot;&gt;&lt;br&gt;无法通过物理组合键截图&lt;br&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151123_avoid-screenshot-in-android-app/00.01.png&quot; alt=&quot;通过ADB截图&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151123_avoid-screenshot-in-android-app/00.02.png&quot; alt=&quot;通过Dump View Hierarchy截图&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151123_avoid-screenshot-in-android-app/00.03.png&quot; alt=&quot;通过Dump View Hierarchy截图&quot;&gt;&lt;br&gt;无法使用开发工具截图&lt;br&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151123_avoid-screenshot-in-android-app/00.04.png&quot; alt=&quot;通过Shell强行截图&quot;&gt;&lt;br&gt;通过Shell强行截图成功 但输出的截图文件除StatusBar含有不规则的像素外几乎为全透明&lt;/p&gt;
&lt;h3 id=&quot;0x02-结语&quot;&gt;&lt;a href=&quot;#0x02-结语&quot; class=&quot;headerlink&quot; title=&quot;0x02 结语&quot;&gt;&lt;/a&gt;0x02 结语&lt;/h3&gt;&lt;p&gt;Android使用 &lt;code&gt;FLAG_SECURE&lt;/code&gt; 限制了SurfaceFlinger的功能，也用它将图形缓存区标记为不可截图，从而一定程度上的保证了屏幕区域的安全，正常开发的情况下推荐使用。&lt;/p&gt;
&lt;p&gt;当然，如果你的用户安装了Xposed框架，别费尽心思了。Forget it~ :D&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候，用户需要在我们的应用中输入类似于身份证号、密码、银行卡号等敏感信息，此时如果在后台不怀好意的应用程序对这些敏感页面进行截图，将导致用户的个人信息泄露。&lt;br&gt;Android为我们提供了一种可以防止Activity被截图的方案来保护用户的隐私。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.keep.moe/tags/Android/"/>
    
      <category term="窗口管理" scheme="http://blog.keep.moe/tags/%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    
      <category term="开发安全" scheme="http://blog.keep.moe/tags/%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>配合Travis CI，将Hexo博客自动部署到你的服务器上。</title>
    <link href="http://blog.keep.moe/2015/11/06/hexo-and-travis-ci/"/>
    <id>http://blog.keep.moe/2015/11/06/hexo-and-travis-ci/</id>
    <published>2015-11-06T17:30:39.000Z</published>
    <updated>2016-03-10T05:07:09.428Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇教程将指导你如何将写好的文章通过Git提交至GitHub仓库，并使用Travis CI自动构建、部署到你的服务器上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年夏天的时候，为了多练习Python，于是用就它写了一个简单的静态博客生成器，有模板有标签，不过与现有的静态博客相比还是相形见绌。即不易管理，也总出现BUG。&lt;/p&gt;
&lt;p&gt;博客是需要静下心来写的，程序总需要维护实在不是长计，于是，昨天我便把博客换成了Hexo。&lt;del&gt;终于可以安静的写博客了。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Hexo是一个基于Node.js的博客框架，从模板、主题再到插件应有尽有，写好文章后可以得到一个静态整站，对于像个人博客这种更新需求不大的网站是再适合不过了。&lt;/p&gt;
&lt;p&gt;网上给出的教程多是将博客托管于GitHub Pages上，然而GitHub Pages在国内部分地区以及部分运营商的网络下的表现有时并不完美，经常出现载入缓慢，CSS及JS无法载入的问题，因此也有部分人选择将博客放在自己的服务器上。&lt;/p&gt;
&lt;p&gt;但是在个人服务器上搭建博客又要考虑一个非常重要的问题——备份数据。GitHub提供的版本控制功能非常强大，但是个人服务器上大都没有使用版本控制系统，需要自行备份。&lt;/p&gt;
&lt;p&gt;为什么不把GitHub的强大版本控制功能与个人服务器的访问速度结合在一起呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本教程并不是为初学者准备的，因为其需要的步骤较多且较复杂，需要读者有使用Git及GitHub的经验，并了解PHP及Bash。&lt;/p&gt;
&lt;h3 id=&quot;0x00-新的开始&quot;&gt;&lt;a href=&quot;#0x00-新的开始&quot; class=&quot;headerlink&quot; title=&quot;0x00 新的开始&quot;&gt;&lt;/a&gt;0x00 新的开始&lt;/h3&gt;&lt;p&gt;新建一个代码仓库，我们暂且取名为 &lt;code&gt;HexoBlog&lt;/code&gt; 好了。&lt;br&gt;为了使仓库更简洁，我们可以在&lt;code&gt;master&lt;/code&gt;分支的基础上新建一个分支，暂且取名为 &lt;code&gt;raw&lt;/code&gt; 分支。&lt;/p&gt;
&lt;h3 id=&quot;0x01-Clone到本地&quot;&gt;&lt;a href=&quot;#0x01-Clone到本地&quot; class=&quot;headerlink&quot; title=&quot;0x01 Clone到本地&quot;&gt;&lt;/a&gt;0x01 Clone到本地&lt;/h3&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;-b&lt;/span&gt; raw &lt;span class=&quot;tag&quot;&gt;&amp;lt;仓库克隆URL&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#只Clone出新建的raw分支 保留master分支用于部署&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x02-安装Node-js&quot;&gt;&lt;a href=&quot;#0x02-安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;0x02 安装Node.js&quot;&gt;&lt;/a&gt;0x02 安装Node.js&lt;/h3&gt;&lt;p&gt;Node.js的版本仍在不断更新中，请至&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目下载页&lt;/a&gt;寻找合适系统架构的安装包。&lt;/p&gt;
&lt;p&gt;安装包自带包管理器NPM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/02.00.png&quot; alt=&quot;Node.js与NPM的版本&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装后可以在Terminal中查询Node.js与NPM的版本。&lt;/p&gt;
&lt;h3 id=&quot;0x03-安装Hexo&quot;&gt;&lt;a href=&quot;#0x03-安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;0x03 安装Hexo&quot;&gt;&lt;/a&gt;0x03 安装Hexo&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ./HexoB&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#进入刚Clone的仓库目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;若 &lt;code&gt;NPM&lt;/code&gt; 出现无法连接的问题，可以尝试&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更换淘宝开源NPM镜像服务器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来我们可以看到仓库中的文件结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/03.00.png&quot; alt=&quot;文件结构&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x04-使用Travis-CI&quot;&gt;&lt;a href=&quot;#0x04-使用Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;0x04 使用Travis CI&quot;&gt;&lt;/a&gt;0x04 使用Travis CI&lt;/h3&gt;&lt;p&gt;首先我们先打开&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI&lt;/a&gt;，可以在右上角找到使用GitHub登陆的按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/04.00.png&quot; alt=&quot;Travis CI首页&quot;&gt;&lt;/p&gt;
&lt;p&gt;授权完成后，你可以在左上角找到My Repositories一旁的加号“+”，点击它，它就会列出你所有的仓库，你只需要找到刚才的 &lt;code&gt;HexoBlog&lt;/code&gt; 并把它左侧的开关打开就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/04.01.png&quot; alt=&quot;添加仓库&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/04.02.png&quot; alt=&quot;选择仓库&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x05-生成GitHub-Personal-Access-Token&quot;&gt;&lt;a href=&quot;#0x05-生成GitHub-Personal-Access-Token&quot; class=&quot;headerlink&quot; title=&quot;0x05 生成GitHub Personal Access Token&quot;&gt;&lt;/a&gt;0x05 生成GitHub Personal Access Token&lt;/h3&gt;&lt;p&gt;登录GitHub，在右上角头像处进入设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/05.00.png&quot; alt=&quot;进入设置&quot;&gt;&lt;/p&gt;
&lt;p&gt;在左侧找到 &lt;code&gt;Personal access tokens&lt;/code&gt;，并点击右上角的 &lt;code&gt;Generate new token&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/05.01.png&quot; alt=&quot;Personal access tokens&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要为新的Token输入一个名字，这里我们就填入 &lt;code&gt;Travis CI&lt;/code&gt; 好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/05.02.png&quot; alt=&quot;Generate new token&quot;&gt;&lt;/p&gt;
&lt;p&gt;确定生成后，Token将显示在页面上，此时需要将其复制并保存好，并避免泄露。遗忘Token后不能找回，只能重新生成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/05.03.png&quot; alt=&quot;生成Token&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，我们还需要&lt;a href=&quot;https://www.random.org/strings/?num=10&amp;amp;len=20&amp;amp;digits=on&amp;amp;upperalpha=on&amp;amp;loweralpha=on&amp;amp;unique=on&amp;amp;format=html&amp;amp;rnd=new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;生成随机字符串&lt;/a&gt;，并在其中选择一行随机字符串，为下文备用。&lt;/p&gt;
&lt;h3 id=&quot;0x06-配置Travis-CI&quot;&gt;&lt;a href=&quot;#0x06-配置Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;0x06 配置Travis CI&quot;&gt;&lt;/a&gt;0x06 配置Travis CI&lt;/h3&gt;&lt;p&gt;首先在Travis CI中找到已经启用自动构建的仓库，并在右侧找到设置按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/06.00.png&quot; alt=&quot;设置按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;有两处需要设置，首先需要启用 &lt;code&gt;Build only if .travis.yml is present&lt;/code&gt; 选项，以避免 &lt;code&gt;master&lt;/code&gt; 分支被构建和陷入构建循环的问题。&lt;/p&gt;
&lt;p&gt;另外，在下方的环境变量设置处，我们需要设置两组变量，并注意保持 &lt;code&gt;Display value in build log&lt;/code&gt; 禁用，以免构建日志泄露Token等信息。&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#需要设置的两组变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;GitHubKEY&lt;/span&gt; = 上文生成的GitHub Personal Access Token&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;NOTIFY_TOKEN&lt;/span&gt; = 上文生成的随机字符串&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://internal-static.keep.moe/blog.keep.moe/20151106_hexo-and-travis-ci/06.01.png&quot; alt=&quot;设置页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;在每次Push后，Travis CI将检查分支下的 &lt;code&gt;.travis.yml&lt;/code&gt; 文件，并以此作为配置进行构建。&lt;/p&gt;
&lt;p&gt;下面是我所使用的 &lt;code&gt;.travis.yml&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;language:&lt;/span&gt; node_js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;node_js:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;0.12&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;install:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; npm install hexo --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;script:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; chmod +x ./build.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; ./build.sh &amp;gt; /dev/&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;branches:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  only:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; raw&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关于Travis CI配置的详细解释可以查阅&lt;a href=&quot;http://docs.travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里，配置文件限制了自动构建工作只会在 &lt;code&gt;raw&lt;/code&gt; 分支下进行。&lt;/p&gt;
&lt;p&gt;可能你已经发现配置中的 &lt;code&gt;build.sh&lt;/code&gt; 了，我们接下来就介绍一下这个文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate &lt;span class=&quot;comment&quot;&gt;#生成静态整站&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ./public &lt;span class=&quot;comment&quot;&gt;#生成的静态页面会存储在public目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global push.default matching&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;username@example.com&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#填入GitHub的邮箱地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#填入GitHub的用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add --all .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;Travis CI Auto Builder&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#自动构建后的内容将全部以此信息提交&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --quiet --force https://&lt;span class=&quot;variable&quot;&gt;$&amp;#123;GitHubKEY&amp;#125;&lt;/span&gt;@github.com/你的GitHub用户名/你的代码仓库名.git master  &lt;span class=&quot;comment&quot;&gt;#自动构建后的内容将全部以此信息提交&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl --connect-timeout 20 --max-time 30 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; http://远端服务器URL/webhook.php?_=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;NOTIFY_TOKEN&amp;#125;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#服务器Webhook 将在下文介绍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x07-远端服务器的配置&quot;&gt;&lt;a href=&quot;#0x07-远端服务器的配置&quot; class=&quot;headerlink&quot; title=&quot;0x07 远端服务器的配置&quot;&gt;&lt;/a&gt;0x07 远端服务器的配置&lt;/h3&gt;&lt;p&gt;到这里，大部分的工作都完成了，我们只需要配置远端服务器就可以了。&lt;/p&gt;
&lt;p&gt;远端服务器所需要做的工作便是将构建好的内容同步到本地，在这之前，我们每次提交到 &lt;code&gt;raw&lt;/code&gt; 分支的新文章会被Travis CI取得并生成整站，再由Travis CI将整站Push回 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;p&gt;因此我们只需要通知远端服务器Clone一下 &lt;code&gt;master&lt;/code&gt; 分支就可以了。&lt;/p&gt;
&lt;p&gt;首先我们在服务器上新建一个Bash文件，我使用的是VPS，因此以保存在 &lt;code&gt;/home/sync_blog.sh&lt;/code&gt; 为例。&lt;/p&gt;
&lt;p&gt;文件内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /var/www/blog/ &lt;span class=&quot;comment&quot;&gt;#进入网站的根目录 假设blog文件夹是blog子域名的根目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf ./* &amp;gt; /dev/null &lt;span class=&quot;comment&quot;&gt;#清理上次的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf ./.* &amp;gt; /dev/null &lt;span class=&quot;comment&quot;&gt;#清理上次的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; --depth=50 --branch=master https://github.com/SumiMakito/SumiMakito.github.io.git ./ &lt;span class=&quot;comment&quot;&gt;#从master分支Clone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下一步，创建一个用PHP实现的类似于Webhook的接口，&lt;del&gt;为什么选择PHP？因为它是最好的语言啊！&lt;/del&gt;很简单，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&quot;上文的随机字符串&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	shell_exec(&lt;span class=&quot;string&quot;&gt;&quot;/home/sync_blog.sh &amp;gt; /dev/null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Done!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Invalid token!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设这个PHP页面可以从 &lt;code&gt;&lt;a href=&quot;http://www.example.com/webhook.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.example.com/webhook.php&lt;/a&gt;&lt;/code&gt; 访问到，那么上文中 &lt;code&gt;build.sh&lt;/code&gt; 中的最后一行就可以改成：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl --connect-timeout 20 --max-time 30 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; http://www.example.com/webhook.php?_=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;NOTIFY_TOKEN&amp;#125;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#服务器Webhook 将在下文介绍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;0x08-测试&quot;&gt;&lt;a href=&quot;#0x08-测试&quot; class=&quot;headerlink&quot; title=&quot;0x08 测试&quot;&gt;&lt;/a&gt;0x08 测试&lt;/h3&gt;&lt;p&gt;99%完成，只欠测试。&lt;/p&gt;
&lt;p&gt;还记得之前的 &lt;code&gt;HexoBlog&lt;/code&gt; 文件夹吗？&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ./HexoB&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new hello-ci &lt;span class=&quot;comment&quot;&gt;#本地没有Hexo的话可以直接跳过这一步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim ./&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/_posts/hello-ci.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add --all .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;Hello, CI!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;这篇教程稍麻烦一些，但是也能帮助你了解Travis CI是如何简单配置并工作的。&lt;/p&gt;
&lt;p&gt;在本地也可以生成整站，但这种方案对于本地无法安装Node.js及Hexo的用户来说很是方便。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇教程将指导你如何将写好的文章通过Git提交至GitHub仓库，并使用Travis CI自动构建、部署到你的服务器上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年夏天的时候，为了多练习Python，于是用就它写了一个简单的静态博客生成器，有模板有标签，不过与现有的静态博客相比还是相形见绌。即不易管理，也总出现BUG。&lt;/p&gt;
&lt;p&gt;博客是需要静下心来写的，程序总需要维护实在不是长计，于是，昨天我便把博客换成了Hexo。&lt;del&gt;终于可以安静的写博客了。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Hexo是一个基于Node.js的博客框架，从模板、主题再到插件应有尽有，写好文章后可以得到一个静态整站，对于像个人博客这种更新需求不大的网站是再适合不过了。&lt;/p&gt;
&lt;p&gt;网上给出的教程多是将博客托管于GitHub Pages上，然而GitHub Pages在国内部分地区以及部分运营商的网络下的表现有时并不完美，经常出现载入缓慢，CSS及JS无法载入的问题，因此也有部分人选择将博客放在自己的服务器上。&lt;/p&gt;
&lt;p&gt;但是在个人服务器上搭建博客又要考虑一个非常重要的问题——备份数据。GitHub提供的版本控制功能非常强大，但是个人服务器上大都没有使用版本控制系统，需要自行备份。&lt;/p&gt;
&lt;p&gt;为什么不把GitHub的强大版本控制功能与个人服务器的访问速度结合在一起呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Travis CI" scheme="http://blog.keep.moe/tags/Travis-CI/"/>
    
      <category term="Hexo" scheme="http://blog.keep.moe/tags/Hexo/"/>
    
      <category term="静态博客" scheme="http://blog.keep.moe/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Openshift下使用NPM时出现EACCESS错误的解决办法</title>
    <link href="http://blog.keep.moe/2015/11/05/openshift-eaccess-solution/"/>
    <id>http://blog.keep.moe/2015/11/05/openshift-eaccess-solution/</id>
    <published>2015-11-05T23:44:37.000Z</published>
    <updated>2016-03-10T05:07:09.428Z</updated>
    
    <content type="html">&lt;p&gt;Npm是Node.js的包管理器，有时安装一些新模块都需要依靠npm install这个命令，但在Openshift这种限制多多的环境下，直接使用npm install这种命令安装模块可能会遇到各种错误，常见的就是本文所说的EACCESS错误。&lt;/p&gt;

&lt;p&gt;这种错误通常是由权限不足导致的，在Openshift这种环境下也不难见到这种问题，因为npm在安装新模块时需要一个临时目录，而普通用户对环境变量中的临时目录是无权写入的，因此修改一下环境变量，把它指向我们有权限读写的文件夹就可以解决这个问题。&lt;/p&gt;

&lt;p&gt;使用SSH Shell连接到你的服务器后使用以下命令(这里以安装express为例)&lt;/p&gt;

&lt;pre&gt;cd app-root/repo/  
mkdir tmp  
export OPENSHIFT_TMP_DIR=&quot;`pwd`/tmp/&quot;  
npm install express
&lt;/pre&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Npm是Node.js的包管理器，有时安装一些新模块都需要依靠npm install这个命令，但在Openshift这种限制多多的环境下，直接使用npm install这种命令安装模块可能会遇到各种错误，常见的就是本文所说的EACCESS错误。&lt;/p&gt;

&lt;p&gt;这种错误通常是由权限不足导致的，在Openshift这种环境下也不难见到这种问题，因为npm在安装新模块时需要一个临时目录，而普通用户对环境变量中的临时目录是无权写入的，因此修改一下环境变量，把它指向我们有权限读写的文件夹就可以解决这个问题。&lt;/p&gt;

&lt;p&gt;使用SSH Shell连接到你的服务器后使用以下命令(这里以安装express为例)&lt;/p&gt;

&lt;pre&gt;cd app-root/repo/  
mkdir tmp  
export OPENSHIFT_TMP_DIR=&quot;`pwd`/tmp/&quot;  
npm install express
&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Openshift" scheme="http://blog.keep.moe/tags/Openshift/"/>
    
      <category term="EACCESS" scheme="http://blog.keep.moe/tags/EACCESS/"/>
    
  </entry>
  
  <entry>
    <title>Android游戏开发中的几种绘图方式</title>
    <link href="http://blog.keep.moe/2014/12/01/android-game-drawing-method/"/>
    <id>http://blog.keep.moe/2014/12/01/android-game-drawing-method/</id>
    <published>2014-12-01T20:22:57.000Z</published>
    <updated>2016-03-10T05:07:09.428Z</updated>
    
    <content type="html">&lt;p&gt;在大部分Android游戏中，游戏画面的更新都是通过单独线程来完成的，若是直接在主线程上绘制，可能会造成无响应(ANR)等问题，因此需要在单独线程中完成绘图。&lt;/p&gt;
&lt;p&gt;由于游戏场景有时会很复杂，可能需要分别绘制背景、控件、人物、文字等内容，部分3D游戏还需要渲染贴图，因此在单独线程中绘图也可能会发生卡顿或丢帧的问题。这个时候就需要想办法提高绘制效率、优化内存，尤其是频繁重绘且重绘物体较多的程序。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;重绘一般分为以下两种方式:&lt;br&gt;被动式： 一般这种方式常用于棋类游戏，只在监听到触摸后才进行重绘，在无触摸事件时便闲置下来，对系统资源的需求并不会太高。&lt;br&gt;主动式： 这种方式就好像是在播放动画一样，画布在不停地重绘，在绘制大量物体时对系统资源的需求较大，因此性能低的设备可能因此发生卡顿或丢帧。&lt;br&gt;一般情况下，2D游戏使用SurfaceView并配合Canvas即可进行快速开发，对于被动式重绘来说这种搭配还是很好的，不仅响应迅速，还会减轻开发难度。&lt;/p&gt;
&lt;p&gt;因此对于一般的开发来说，直接使用Canvas画图就可以满足需求。&lt;br&gt;关于OpenGL的绘图方式，将在以后的文章中提到。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在大部分Android游戏中，游戏画面的更新都是通过单独线程来完成的，若是直接在主线程上绘制，可能会造成无响应(ANR)等问题，因此需要在单独线程中完成绘图。&lt;/p&gt;
&lt;p&gt;由于游戏场景有时会很复杂，可能需要分别绘制背景、控件、人物、文字等内容，部分3D游戏还需要渲染贴图，因此在单独线程中绘图也可能会发生卡顿或丢帧的问题。这个时候就需要想办法提高绘制效率、优化内存，尤其是频繁重绘且重绘物体较多的程序。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.keep.moe/tags/Android/"/>
    
      <category term="游戏开发" scheme="http://blog.keep.moe/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="SurfaceView" scheme="http://blog.keep.moe/tags/SurfaceView/"/>
    
      <category term="OpenGL" scheme="http://blog.keep.moe/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Hello, world!</title>
    <link href="http://blog.keep.moe/2014/11/03/hello-world/"/>
    <id>http://blog.keep.moe/2014/11/03/hello-world/</id>
    <published>2014-11-03T23:10:35.000Z</published>
    <updated>2016-03-10T05:07:09.428Z</updated>
    
    <content type="html">&lt;p&gt;一年前实验性的买了2.99USD/年的.info域名(&lt;del&gt;szumi.info&lt;/del&gt;)，它实在过于垃圾以至于我都不愿提起，最终也因续不起费也不想续费而告终。&lt;br&gt;今天终于在Hostker注册到了一个好域名(至少我认为还不错)，价格还可以接受，95CNY/年，以后就用它了，新家就在这里。&lt;br&gt;你好，我是Makito。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一年前实验性的买了2.99USD/年的.info域名(&lt;del&gt;szumi.info&lt;/del&gt;)，它实在过于垃圾以至于我都不愿提起，最终也因续不起费也不想续费而告终。&lt;br&gt;今天终于在Hostker注册到了一个好域名(至少我认为还不错)，价格还可以接受，95CNY/年，以后就用它了，新家就在这里。&lt;br&gt;你好，我是Makito。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
